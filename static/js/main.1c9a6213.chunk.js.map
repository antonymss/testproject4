{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","React","useState","value","setValue","valueTwo","setValueTwo","valueThree","setValueThree","valueFour","setValueFour","disabled","setDisabled","disabledTwo","setDisabledTwo","disabledThree","setDisabledThree","disabledFour","setDisabledFour","checked","setChecked","checkedTwo","setCheckedTwo","disabledChecked","setDisabledFourChecked","disabledSecurityKey","setDisabledSecurityKey","formik","useFormik","validate","values","errors","EnthernetIP","test","EnthernetSubnetMask","EnthernetDNS","WirelessIP","WirelessSubnetMask","WirelessDNS","WirelessNetworkName","WirelessSecurityKey","initialValues","EnthernetDefaultGateway","EnthernetAlternativeDNS","WirelessDefaultGateway","WirelessAlternativeDNS","onSubmit","console","log","JSON","stringify","handleSubmit","style","display","justifyContent","marginBottom","border","flexDirection","width","FormControl","FormLabel","RadioGroup","name","onChange","event","target","FormControlLabel","control","Radio","label","DialogContentText","color","height","TextField","size","variant","id","getFieldProps","handleChange","Checkbox","inputProps","Select","native","minWidth","marginLeft","Button","type","marginRight","backgroundColor","borderRadius","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1c9a6213.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\nimport {\n    Button,\n    Checkbox,\n    DialogContentText,\n    FormControl,\n    FormControlLabel,\n    FormLabel, InputLabel,\n    Radio,\n    RadioGroup,\n    Select,\n    TextField\n} from \"@material-ui/core\";\nimport AcUnitIcon from '@material-ui/icons/AcUnit';\nimport RefreshOutlinedIcon from '@material-ui/icons/RefreshOutlined';\nimport {FormikErrors, useFormik} from 'formik';\nimport {log} from \"util\";\n\ntype FormValuesType = {\n    EnthernetIP: string\n    EnthernetDNS: string\n    EnthernetSubnetMask: string\n    EnthernetDefaultGateway: string\n    EnthernetAlternativeDNS: string\n    WirelessNetworkName: string\n    WirelessSecurityKey: string\n    WirelessIP: string\n    WirelessDNS: string\n    WirelessSubnetMask: string\n    WirelessDefaultGateway: string\n    WirelessAlternativeDNS: string\n}\n\nfunction App() {\n    const [value, setValue] = React.useState('');\n    const [valueTwo, setValueTwo] = React.useState('');\n    const [valueThree, setValueThree] = React.useState('');\n    const [valueFour, setValueFour] = React.useState('');\n    const [disabled, setDisabled] = useState(true)\n    const [disabledTwo, setDisabledTwo] = useState(true)\n    const [disabledThree, setDisabledThree] = useState(true)\n    const [disabledFour, setDisabledFour] = useState(true)\n    const [checked, setChecked] = React.useState(false);\n    const [checkedTwo, setCheckedTwo] = React.useState(false);\n    const [disabledChecked, setDisabledFourChecked] = useState(true)\n    const [disabledSecurityKey, setDisabledSecurityKey] = useState(true)\n\n    const handleChangeOne = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setValue((event.target as HTMLInputElement).value);\n    }\n    const handleChangeTwo = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setValueTwo((event.target as HTMLInputElement).value);\n    }\n    const handleChangeThree = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setValueThree((event.target as HTMLInputElement).value);\n    }\n    const handleChangeFour = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setValueFour((event.target as HTMLInputElement).value);\n    }\n\n    const handleChangeChecked = (event: React.ChangeEvent<HTMLInputElement>, checked: boolean) => {\n        setChecked(event.target.checked);\n\n        setDisabledFourChecked(!disabledChecked)\n    };\n    const handleChangeCheckedTwo = (event: React.ChangeEvent<HTMLInputElement>, checked: boolean) => {\n        setCheckedTwo(event.target.checked)\n        setDisabledSecurityKey(!disabledSecurityKey)\n\n\n    };\n\n    const formik = useFormik({\n        validate: (values: FormValuesType) => {\n            let errors: FormikErrors<FormValuesType> = {}\n            if (!values.EnthernetIP) {\n                errors.EnthernetIP = 'Field is equired'\n            } else if (!/^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/i.test(values.EnthernetIP)) {\n                errors.EnthernetIP = 'Invalid IP address'\n            }\n            if (!values.EnthernetSubnetMask) {\n                errors.EnthernetSubnetMask = 'Field is equired'\n            } else if (!/^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/i.test(values.EnthernetSubnetMask)) {\n                errors.EnthernetSubnetMask = 'Invalid subnetMask address'\n            }\n            if (!values.EnthernetDNS) {\n                errors.EnthernetDNS = 'Field is equired'\n            } else if (!/(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/i.test(values.EnthernetDNS)) {\n                errors.EnthernetDNS = 'Invalid DNS address'\n            }\n\n            if (!values.WirelessIP) {\n                errors.WirelessIP = 'Field is equired'\n            } else if (!/^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/i.test(values.WirelessIP)) {\n                errors.WirelessIP = 'Invalid IP address'\n            }\n            if (!values.WirelessSubnetMask) {\n                errors.WirelessSubnetMask = 'Field is equired'\n            } else if (!/^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/i.test(values.WirelessSubnetMask)) {\n                errors.WirelessSubnetMask = 'Invalid subnetMask address'\n            }\n            if (!values.WirelessDNS) {\n                errors.WirelessDNS = 'Field is equired'\n            } else if (!/(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/i.test(values.WirelessDNS)) {\n                errors.WirelessDNS = 'Invalid DNS address'\n            }\n            if (!values.WirelessNetworkName) {\n                errors.WirelessNetworkName = 'Field is equired'}\n            if (!values.WirelessSecurityKey) {\n                errors.WirelessSecurityKey = 'Field is equired'}\n\n            return errors\n        },\n        initialValues: {\n            EnthernetIP: '',\n            EnthernetSubnetMask: '',\n            EnthernetDefaultGateway: '',\n            EnthernetDNS: '',\n            EnthernetAlternativeDNS: '',\n            WirelessNetworkName: '',\n            WirelessSecurityKey: '',\n            WirelessIP: '',\n            WirelessSubnetMask: '',\n            WirelessDefaultGateway: '',\n            WirelessDNS: '',\n            WirelessAlternativeDNS: '',\n\n\n        },\n        onSubmit: values => {\n            console.log(JSON.stringify(values, null, 2))\n\n        },\n    });\n\n    return (\n        <form onSubmit={formik.handleSubmit}>\n            <div style={{display: 'flex', justifyContent: 'center', marginBottom: '10px'}}>\n                <div style={{border: '1px solid black', display: 'flex', flexDirection: 'column', width: '50%'}}>\n                    <div>\n                        <FormControl>\n                            <FormLabel><h2>Enthernet Settings</h2></FormLabel>\n\n                            <RadioGroup name=\"radio1\" value={value} onChange={handleChangeOne}>\n                                <FormControlLabel value=\"first\"\n                                                  control={<Radio onChange={(event, checked) => {\n                                                      if (checked) {\n                                                          setDisabled(true)\n                                                      }\n                                                  }}/>}\n                                                  label=\"Obtain an IP address automatically (DHCP/BootP)\"/>\n                                <FormControlLabel value=\"second\" control={<Radio onChange={(event, checked) => {\n                                    if (checked) {\n                                        setDisabled(false)\n                                    }\n                                }}/>} label=\"Use following IP address:\"/>\n                            </RadioGroup>\n                            <div>\n                                <div style={{display: 'flex', justifyContent: 'flex-end'}}>\n                                    <DialogContentText> IP address: <AcUnitIcon\n                                        style={{color: \"red\", height: '10px', width: '10px'}}/>\n\n                                        <TextField size=\"small\"\n                                                   disabled={disabled}\n                                                   variant=\"outlined\"\n                                                   id=\"EnthernetIP\" {...formik.getFieldProps(\"EnthernetIP\")}\n                                                   value={formik.values.EnthernetIP}\n                                                   onChange={formik.handleChange}\n                                        />\n                                        {formik.errors.EnthernetIP ? <div>{formik.errors.EnthernetIP}</div> : null}\n\n                                    </DialogContentText>\n                                </div>\n                                <div style={{display: 'flex', justifyContent: 'flex-end'}}>\n                                    <DialogContentText> Subnet Mask: <AcUnitIcon\n                                        style={{color: \"red\", height: '10px', width: '10px'}}/>\n                                        <TextField size=\"small\" disabled={disabled} variant=\"outlined\"\n                                                   id=\"EnthernetSubnetMask\" {...formik.getFieldProps(\"EnthernetSubnetMask\")}\n                                                   value={formik.values.EnthernetSubnetMask}\n                                                   onChange={formik.handleChange}\n                                        />\n                                        {formik.errors.EnthernetSubnetMask ? <div>{formik.errors.EnthernetSubnetMask}</div> : null}\n                                    </DialogContentText>\n                                </div>\n                                <div style={{display: 'flex', justifyContent: 'flex-end'}}>\n                                    <DialogContentText> Default Gateway:\n                                        <TextField size=\"small\" disabled={disabled} variant=\"outlined\"\n                                                   id=\"EnthernetDefaultGateway\" {...formik.getFieldProps(\"EnthernetDefaultGateway\")}\n                                                   value={formik.values.EnthernetDefaultGateway}\n                                                   onChange={formik.handleChange}\n                                        />\n                                    </DialogContentText>\n                                </div>\n                            </div>\n                        </FormControl>\n\n                    </div>\n\n                    <div>\n                        <RadioGroup name=\"radio2\" value={valueTwo} onChange={handleChangeTwo}>\n                            <FormControlLabel value=\"third\" control={<Radio onChange={(event, checked) => {\n                                if (checked) {\n                                    setDisabledTwo(true)\n                                }\n                            }}/>}\n                                              label=\"Obtain DNS server address automatically\"/>\n                            <FormControlLabel value=\"fourth\" control={<Radio onChange={(event, checked) => {\n                                if (checked) {\n                                    setDisabledTwo(false)\n                                }\n                            }}/>} label=\"Use following DS server address:\"/>\n                        </RadioGroup>\n                        <div style={{display: 'flex', justifyContent: 'center'}}>\n                            <DialogContentText> Perfered DNS server: <AcUnitIcon\n                                style={{color: \"red\", height: '10px', width: '10px'}}/>\n                                <TextField disabled={disabledTwo} size=\"small\" variant=\"outlined\"\n                                           id=\"EnthernetDNS\" {...formik.getFieldProps(\"EnthernetDNS\")}\n                                           onChange={formik.handleChange} value={formik.values.EnthernetDNS}\n                                />\n                                {formik.errors.EnthernetDNS ? <div>{formik.errors.EnthernetDNS}</div> : null}\n                            </DialogContentText>\n                        </div>\n                        <div style={{display: 'flex', justifyContent: 'center'}}>\n                            <DialogContentText> Alternative DNS server:\n                                <TextField size=\"small\" disabled={disabledTwo} variant=\"outlined\"\n                                           id=\"EnthernetAlternativeDNS\" {...formik.getFieldProps(\"EnthernetAlternativeDNS\")}\n                                           onChange={formik.handleChange} value={formik.values.EnthernetAlternativeDNS}\n                                />\n                            </DialogContentText>\n                        </div>\n                    </div>\n                </div>\n\n                <div style={{border: '1px solid black', display: 'flex', flexDirection: 'column', width: '50%'}}>\n                    <div>\n\n                        <FormLabel style={{display: 'flex', justifyContent: 'start'}}><h2>Wireless Settings</h2>\n                        </FormLabel>\n\n                        <div style={{\n                            display: \"flex\",\n                            flexDirection: \"column\",\n                        }}>\n                            <div>\n                                <Checkbox\n                                    checked={checked}\n                                    onChange={handleChangeChecked}\n                                    inputProps={{'aria-label': 'primary checkbox'}}\n                                />\n                                <FormLabel>Enable wifi:</FormLabel>\n                            </div>\n                            <div style={{display: 'flex', justifyContent: 'space-evenly'}}>\n                                <DialogContentText> Whireless Network Name: <AcUnitIcon\n                                    style={{color: \"red\", height: '10px', width: '10px'}}/>\n\n                                    <Select\n                                        disabled={disabledChecked}\n                                        variant=\"outlined\"\n                                        native\n                                        style={{minWidth: '200px', height: '35px'}}\n                                        id=\"WirelessNetworkName\" {...formik.getFieldProps(\"WirelessNetworkName\")}\n                                        value={formik.values.WirelessNetworkName}\n                                        onChange={formik.handleChange}\n                                    >\n                                        <option  value=\"\" />\n                                        <option value={10}>Ten</option>\n                                        <option value={20}>Twenty</option>\n                                        <option value={30}>Thirty</option>\n                                    </Select>\n                                     <RefreshOutlinedIcon/>\n                                    {formik.errors.WirelessNetworkName ? <div>{formik.errors.WirelessNetworkName}</div> : null}\n                                </DialogContentText>\n\n                            </div>\n                        </div>\n\n                        <Checkbox\n                            checked={checkedTwo}\n                            onChange={handleChangeCheckedTwo}\n                            inputProps={{'aria-label': 'primary checkbox'}}\n                        />\n                        <FormLabel>Enable Wireless Security:</FormLabel>\n                        <div style={{display: 'flex', justifyContent: 'space-evenly', marginLeft: 'auto'}}>\n                            <DialogContentText> Security Key: <AcUnitIcon\n                                style={{color: \"red\", height: '10px', width: '10px'}}/>\n                                <TextField size=\"small\" disabled={disabledSecurityKey} variant=\"outlined\"\n                                           id=\"WirelessSecurityKey\" {...formik.getFieldProps(\"WirelessSecurityKey\")}\n                                           value={formik.values.WirelessSecurityKey}\n                                           onChange={formik.handleChange}\n                                />\n                                {formik.errors.WirelessSecurityKey ? <div>{formik.errors.WirelessSecurityKey}</div> : null}\n                            </DialogContentText>\n                        </div>\n\n                        <RadioGroup name=\"radio1\" value={valueThree} onChange={handleChangeThree}\n                                    style={{marginLeft: '10px'}}>\n                            <FormControlLabel value=\"first\"\n                                              control={<Radio onChange={(event, checked) => {\n                                                  if (checked) {\n                                                      setDisabledThree(true)\n                                                  }\n                                              }}/>}\n                                              label=\"Obtain an IP address automatically (DHCP/BootP)\"/>\n                            <FormControlLabel value=\"second\" control={<Radio onChange={(event, checked) => {\n                                if (checked) {\n                                    setDisabledThree(false)\n                                }\n                            }}/>} label=\"Use following IP address:\"/>\n                        </RadioGroup>\n\n                        <div style={{display: 'flex', justifyContent: 'space-evenly'}}>\n                            <DialogContentText> IP address: <AcUnitIcon\n                                style={{color: \"red\", height: '10px', width: '10px'}}/>\n                                <TextField disabled={disabledThree} variant=\"outlined\" size=\"small\"\n                                           id=\"WirelessIP\" {...formik.getFieldProps(\"WirelessIP\")}\n                                           value={formik.values.WirelessIP}\n                                           onChange={formik.handleChange}\n                                />\n                                {formik.errors.WirelessIP ? <div>{formik.errors.WirelessIP}</div> : null}\n                            </DialogContentText>\n                        </div>\n                        <div style={{display: 'flex', justifyContent: 'space-evenly'}}>\n                            <DialogContentText> Subnet Mask: <AcUnitIcon\n                                style={{color: \"red\", height: '10px', width: '10px'}}/>\n                                <TextField size=\"small\" disabled={disabledThree} variant=\"outlined\"\n                                           id=\"WirelessSubnetMask\" {...formik.getFieldProps(\"WirelessSubnetMask\")}\n                                           value={formik.values.WirelessSubnetMask}\n                                           onChange={formik.handleChange}\n                                />\n                                {formik.errors.WirelessSubnetMask ?\n                                    <div>{formik.errors.WirelessSubnetMask}</div> : null}\n                            </DialogContentText>\n                        </div>\n                        <div style={{display: 'flex', justifyContent: 'space-evenly'}}>\n                            <DialogContentText> Default Gateway:\n                                <TextField size=\"small\" disabled={disabledThree} variant=\"outlined\"\n                                           id=\"WirelessDefaultGateway\" {...formik.getFieldProps(\"WirelessDefaultGateway\")}\n                                           value={formik.values.WirelessDefaultGateway}\n                                           onChange={formik.handleChange}/>\n                            </DialogContentText>\n                        </div>\n\n                    </div>\n\n                    <div>\n                        <RadioGroup name=\"radio2\" value={valueFour} onChange={handleChangeFour}\n                                    style={{marginLeft: '10px'}}>\n                            <FormControlLabel value=\"third\" control={<Radio onChange={(event, checked) => {\n                                if (checked) {\n                                    setDisabledFour(true)\n                                }\n                            }}/>}\n                                              label=\"Obtain DNS server address automatically\"/>\n                            <FormControlLabel value=\"fourth\" control={<Radio onChange={(event, checked) => {\n                                if (checked) {\n                                    setDisabledFour(false)\n                                }\n                            }}/>} label=\"Use following DS server address:\"/>\n                        </RadioGroup>\n                        <div style={{display: 'flex', justifyContent: 'flex-end'}}>\n                            <DialogContentText> Perfered DNS server: <AcUnitIcon\n                                style={{color: \"red\", height: '10px', width: '10px'}}/>\n                                <TextField size=\"small\" disabled={disabledFour} variant=\"outlined\"\n                                           id=\"WirelessDNS\" {...formik.getFieldProps(\"WirelessDNS\")}\n                                           onChange={formik.handleChange} value={formik.values.WirelessDNS}\n                                />\n                                {formik.errors.WirelessDNS ? <div>{formik.errors.WirelessDNS}</div> : null}\n                            </DialogContentText>\n                        </div>\n                        <div style={{display: 'flex', justifyContent: 'flex-end'}}>\n                            <DialogContentText> Alternative DNS server:\n                                <TextField size=\"small\" disabled={disabledFour} variant=\"outlined\"\n                                           id=\"WirelessAlternativeDNS\" {...formik.getFieldProps(\"WirelessAlternativeDNS\")}\n                                           onChange={formik.handleChange} value={formik.values.WirelessAlternativeDNS}\n                                />\n                            </DialogContentText>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <Button variant=\"contained\" color=\"primary\" type={'submit'}\n                    style={{marginRight: '10px', backgroundColor: \"#06c7f3\", borderRadius: '20px', width: '110px'}}>\n                Save\n            </Button>\n            <Button variant=\"outlined\"\n                    style={{color: \"#06c7f3\", borderRadius: '20px', width: '110px', border: '1px solid #06c7f3'}}>\n                Cancel\n            </Button>\n\n        </form>\n    )\n}\n\nexport default App;\n\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}